Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.hostname = "exchange"
  config.vm.disk :disk, size: "80GB", primary: true
  config.vm.network :private_network, ip: "192.168.56.10"
  config.vm.network "forwarded_port", guest: 514, host: 514, auto_correct: true
  config.vm.network "forwarded_port", guest: 3000, host: 3000, auto_correct: true
  config.vm.network "forwarded_port", guest: 3090, host: 3090, auto_correct: true
  config.vm.network "forwarded_port", guest: 3111, host: 3111, auto_correct: true
  config.vm.network "forwarded_port", guest: 9008, host: 9008, auto_correct: true
  config.vm.network "forwarded_port", guest: 9443, host: 9443, auto_correct: true
  config.vm.network "forwarded_port", guest: 31800, host: 31800, auto_correct: true
  config.vm.network "forwarded_port", guest: 32048, host: 32048, auto_correct: true
  config.vm.network "forwarded_port", guest: 32049, host: 32049, auto_correct: true
  config.vm.network "forwarded_port", guest: 32348, host: 32348, auto_correct: true
  config.vm.network "forwarded_port", guest: 32348, host: 32348, auto_correct: true
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "4096"
  end
  config.vm.provision "shell", inline: <<-SHELL

# update linux and install required packages
    apt-get -y update
    apt-get -y upgrade
    apt-get install -y gcc make git curl jq net-tools docker.io bind9 bind9utils docker-compose-v2

# configure firewall
    ufw allow 53/tcp
    ufw allow 514/tcp
    ufw allow 3000/tcp
    ufw allow 3090/tcp
    ufw allow 3111/tcp
    ufw allow 9008/tcp
    ufw allow 9443/tcp
    ufw allow 31800/tcp
    ufw allow 32048/tcp
    ufw allow 32049/tcp
    ufw allow 32349/tcp
    ufw allow 32348/tcp

# configure dns/reverse dns
    sudo tee -a /etc/bind/named.conf.local > /dev/null <<EOF
    zone "demo-in-a-box" {
    type master;
    file "/etc/bind/db.demo-in-a-box";
};
EOF
    sudo tee /etc/bind/db.demo-in-a-box > /dev/null <<EOF
;
; BIND data file for local loopback interface
;
\$TTL    604800
@       IN      SOA     master.demo-in-a-box. root.localhost. (
                              2         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@       IN      NS      master.demo-in-a-box.
@       IN      A       192.168.56.10
@       IN      AAAA    ::1
master IN      A       192.168.56.10
node1   IN      A       192.168.56.20
node2   IN      A       192.168.56.30
node3   IN      A       192.168.56.40
node4   IN      A       192.168.56.50
node5   IN      A       192.168.56.60
EOF
    sudo tee /etc/bind/db.192.168.56 > /dev/null <<EOF
\$TTL    604800
@       IN      SOA     ns1.demo-in-a-box. admin.demo-in-a-box. (
                          2025051201 ; Serial
                          604800     ; Refresh
                          86400      ; Retry
                          2419200    ; Expire
                          604800 )   ; Negative Cache TTL
;
@       IN      NS      ns1.demo-in-a-box.

10      IN      PTR     demo-in-a-box.
11      IN      PTR     master.demo-in-a-box.
12      IN      PTR     node1.demo-in-a-box.
13        IN        PTR    node2.demo-in-a-box
14     IN      PTR     node3.demo-in-a-box
15     IN       PTR   node4.demo-in-a-box
16     IN      PTR   node5.demo-in-a-box
EOF
    sudo systemctl reload named.service
    sudo tee /etc/systemd/resolved.conf >/dev/null <<EOF
[Resolve]
DNS=192.168.56.10
FallbackDNS=8.8.8.8
EOF
    sudo systemctl restart systemd-resolved

# configure syslog 
    sudo tee /etc/rsyslog.d/60-custom-forwarding.conf > /dev/null <<EOF
template(name="MyCustomTemplate" type="string" string="<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag% %msg%\\n")
*.* action(type="omfwd" target="192.168.56.10" port="32150" protocol="tcp" template="MyCustomTemplate")
EOF
    sudo systemctl restart rsyslog

# install edgelake on hub
    git clone https://github.com/edgelake/docker-compose
    cd docker-compose

# edit Makefile 
    sed -i 's/-it/-d/g' Makefile
    sed -i 's/^export TAG \?= .*/export TAG ?= latest/' Makefile
    #sed -i 's/^export LEDGER_CONN \?=.*/export LEDGER_CONN ?= 192.168.56.10:32048/' Makefile
    #sed -i 's/^NIC_TYPE \?=.*/NIC_TYPE ?= enp0s8/' Makefile

# configure master
    cd docker-makefiles
    sed -i "s/^NODE_NAME=.*$/NODE_NAME=$(hostname)-master/" edgelake_master.env
    sed -i "s/^LEDGER_CONN=.*$/LEDGER_CONN=192.168.56.10:32048/" edgelake_master.env
    sed -i 's/^TCP_BIND=.*$/TCP_BIND=true/' edgelake_master.env
    sed -i 's/^REST_BIND=.*$/REST_BIND=true/' edgelake_master.env
    sed -i 's/^BROKER_BIND=.*$/BROKER_BIND=true/' edgelake_master.env
    if grep -q "^NIC_TYPE=" edgelake_master.env
    then
      sed -i "s/^NIC_TYPE=.*$/NIC_TYPE=enp0s8/" edgelake_master.env
    else
      echo "NIC_TYPE=enp0s8" >> edgelake_master.env
    fi

# configure query
    sed -i "s/^NODE_NAME=.*$/NODE_NAME=$(hostname)-query/" edgelake_query.env
    sed -i "s/^LEDGER_CONN=.*$/LEDGER_CONN=192.168.56.10:32048/" edgelake_query.env
    sed -i 's/^REMOTE_CLI=.*$/REMOTE_CLI=true/' edgelake_query.env
    sed -i 's/^TCP_BIND=.*$/TCP_BIND=true/' edgelake_query.env
    sed -i 's/^REST_BIND=.*$/REST_BIND=false/' edgelake_query.env
    if grep -q "^NIC_TYPE=" edgelake_query.env
    then
       sed -i "s/^NIC_TYPE=.*$/NIC_TYPE=enp0s8/" edgelake_query.env
    else
      echo "NIC_TYPE=enp0s8" >> edgelake_query.env
    fi

# verify configs
    echo "Master config"
    cat edgelake_master.env
    echo "Query config"
    cat edgelake_query.env
    sleep 5

# start master/query/cli
    cd ..
    sudo  make up EDGELAKE_TYPE=master  
    sleep 5
    sudo  make up EDGELAKE_TYPE=query  
    sleep 5

# start grafana
    sudo docker run -it -d -p 3000:3000 -e DATASOURCE_URL=http://192.168.56.10:32349 --name grafana anylogco/oh-grafana:latest

# install hzn exchange hub
    cd ..
    # export HZN_TRANSPORT=https
    # export BAO_DISABLE_TLS=false
    export HZN_LISTEN_IP=0.0.0.0
    export CSS_IMAGE_TAG=1.10.1-1577
    export MONGO_IMAGE_TAG=4.0.6
    export EXCHANGE_IMAGE_NAME=quay.io/open-horizon/exchange-alpine
    curl -sSL https://raw.githubusercontent.com/open-horizon/devops/master/mgmt-hub/deploy-mgmt-hub.sh | sudo -sE HZN_LISTEN_IP=0.0.0.0 bash -s --  | tee summary.txt
    tail -n 2 summary.txt | cut -c 3- > mycreds.env
    #rm summary.txt
    source mycreds.env

# install demo-in-a-box to install edgelake services
    git clone -b edgelake-demo https://github.com/oshadmon/demo-in-a-box
    cd demo-in-a-box

# publish grafana to exchange
    cd grafana 
    sudo -sE make publish

# publish postgres to exchange
    cd ../postgresql
    sudo -sE make publish

#modify edgelake operator files for system
   cd ../edgelake/configurations
   sleep 10
   sed -i "s/^NODE_NAME=.*$/NODE_NAME=$(hostname)-operator/" edgelake_operator.env
   sed -i "s/^LEDGER_CONN=.*$/LEDGER_CONN=192.168.56.10:32048/" edgelake_operator.env
   sed -i 's/^ANYLOG_BROKER_PORT=.*$/ANYLOG_BROKER_PORT=32150/' edgelake_operator.env
   sed -i 's/^TCP_BIND=.*$/TCP_BIND=true/' edgelake_operator.env
   sed -i 's/^REST_BIND=.*$/TCP_BIND=true/' edgelake_operator.env
   sed -i 's/^BROKER_BIND=.*$/TCP_BIND=true/' edgelake_operator.env
   sed -i 's/^ENABLE_MQTT=.*$/ENABLE_MQTT=true/' edgelake_operator.env
   sed -i 's/^SYSLOG_MONITORING=.*$/SYSLOG_MONITORING=true/' edgelake_operator.env
   #sed -i 's/^CLUSTER_NAME=.*$/CLUSTER_NAME=cluster-demo-in-a-box/' edgelake_operator.env
   if grep -q "NIC_TYPE=" edgelake_operator.env
   then
     sed -i "s/^NIC_TYPE=.*$/NIC_TYPE=enp0s8/" edgelake_operator.env
   else
     echo "NIC_TYPE=enp0s8" >> edgelake_operator.env
   fi

# publish operator to exchange
    cd ../..
    sudo -sE make publish EDGELAKE_TYPE=operator

# attach hzn client to ex and pull operator
    hzn unregister -f
    hzn register --policy=edgelake/node.policy.json
    sleep 60 

# install docker monitoring
  wget https://raw.githubusercontent.com/AnyLog-co/Sample-Data-Generator/refs/heads/os-dev/docker_insight.py
  sudo python3 docker_insight.py 192.168.56.10:32149 --db-name new_company --table-name docker_insight --wait 0.5 &
 
  SHELL
end
